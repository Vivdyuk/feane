{"version":3,"file":"static/js/660.9bb05271.chunk.js","mappings":"mMAIaA,EAAW,WACpB,OACI,SAAC,IAAM,WACH,SAAC,IAAW,KAGxB,C,2GCCaC,EAAQ,SAAH,GAAyE,IAAnEC,EAAI,EAAJA,KAAMC,EAAS,EAATA,UAAWC,EAAW,EAAXA,YAAaC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAC/D,OACI,kBACIL,KAAOA,EACPC,UAAYA,EACZC,YAAcA,EACdC,KAAOA,EACPG,MAAOF,EAAMD,GACbI,SAAUF,EACVG,UAAQ,GAGpB,ECnBaC,EAAc,CAAC,QAAS,OAAQ,WAAY,Q,8BCY5CC,EAAc,WACvB,IACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAgB,CACpCV,KAAM,GACNW,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,QAAS,KACX,eANKC,EAAI,KAAEC,EAAO,KA2BdC,EAAmC,SAACC,GACtC,MAAwBA,EAAMC,OAAtBnB,EAAI,EAAJA,KAAMG,EAAK,EAALA,MACda,GAAQ,SAACI,GAAS,yBACXA,GAAS,cACXpB,EAAOG,GAAK,GAErB,EAEA,OACI,oBAASL,UAAU,8BAA6B,UAC5C,iBAAKA,UAAU,YAAW,WACtB,gBAAKA,UAAU,oBAAmB,UAC9B,4CAIJ,iBAAKA,UAAU,MAAK,WAChB,gBAAKA,UAAU,WAAU,UACrB,gBAAKA,UAAU,iBAAgB,UAC3B,kBAAMuB,SAtCS,SAACH,GACpCA,EAAMI,iBACNC,EAAAA,QAAAA,KACI,oBDrBmB,SAAH,GAAuD,IAAhDX,EAAK,EAALA,MAAOZ,EAAI,EAAJA,KAAMa,EAAK,EAALA,MAAOF,EAAI,EAAJA,KAAMG,EAAO,EAAPA,QACzD,MAAM,QAAN,OAAed,EAAI,gCAAwBc,EAAU,EAAC,eAAWA,EAAU,EAAC,iBAAiB,GAAE,YAAIH,EAAKa,WAAW,IAAK,QAAO,4DAAoDZ,EAAK,eAAOC,EAAK,IACxM,CCoBYY,CAAgBV,GAChB,MACA,MACA,WACIW,EAAAA,OAAAA,KAAY,mBAEXR,EAAMC,OAA2BQ,QAClCC,YAAW,WACPpB,EAAS,IACb,GAAG,IAEP,GAER,EAqBuD,UAhDpC,CAAC,OAAQ,QAAS,SAiDIqB,KAAI,SAAC7B,GAAI,OACd,SAACJ,EAAK,CAEFC,KAAOS,EAAYwB,MAAK,SAAAjC,GAAI,OAAIG,IAASH,CAAI,KAAK,OAClDG,KAAOA,EACPC,MAAQc,EAAKf,GACbE,SAAWe,EACXlB,YAAW,gBDnE5BgC,ECmEmD/B,EDnExB+B,EAAO,GAAGC,oBAAsBD,EAAOE,MAAM,KCoEvDnC,UAAU,gBANJE,GD9DxB,IAAC+B,CCqEe,KAGV,oBAAQjC,UAAU,gCAAgCE,KAAO,UACjDI,SAAWa,EAAc,WAC7B,mBAAQiB,aAAe,GAAKC,UAAQ,kCAGpC,mBAAQhC,MAAM,IAAG,gBAGjB,mBAAQA,MAAM,IAAG,gBAGjB,mBAAQA,MAAM,IAAG,gBAGjB,mBAAQA,MAAM,IAAG,gBAGjB,mBAAQA,MAAM,IAAG,mBAInB,SAACP,EAAK,CACJC,KAAO,iBACPG,KAAO,OACPC,MAAQc,EAAW,KACnBb,SAAWe,EACXnB,UAAY,kBAEhB,gBAAKA,UAAU,UAAS,UACpB,mBAAQD,KAAO,SAAU,gCAOzC,gBAAKC,UAAU,WAAU,UACrB,gBAAKA,UAAU,iBAAgB,UAC3B,SAACsC,EAAA,EAAK,CACFC,IAAM,kFACNC,eAAgB,EAChBC,OAAQ,eAQxC,C","sources":["components/Pages/BookPage/BookPage.tsx","components/shared/Input/Input.tsx","utils/stringUtils.ts","components/sections/BookSection/BookSection.tsx"],"sourcesContent":["import React from 'react';\nimport { BookSection } from \"../../sections/BookSection/BookSection\";\nimport FadeIn from \"react-fade-in\";\n\nexport const BookPage = () => {\n    return (\n        <FadeIn>\n            <BookSection />\n        </FadeIn>\n    );\n};\n","import React from 'react';\n\ninterface IInput {\n    type: string,\n    className?: string,\n    placeholder?: string,\n    name: string,\n    state: string,\n    setState: React.Dispatch<React.SetStateAction<any>>\n}\n\nexport const Input = ({ type, className, placeholder, name, state, setState }: IInput) => {\n    return (\n        <input\n            type={ type }\n            className={ className }\n            placeholder={ placeholder }\n            name={ name }\n            value={state[name]}\n            onChange={setState}\n            required\n        />\n    );\n};\n","import { IForm } from \"../components/sections/BookSection/BookSection\";\n\nexport const containsIgnoreCase = (string: string | number, substring: string): boolean => String(string).toLocaleLowerCase().includes(substring.toLowerCase())\n\nexport const INPUT_TYPES = ['email', 'text', 'password', 'date']\n\nexport const capitalize = (string: string): string => string[0].toLocaleUpperCase() + string.slice(1);\n\n\nexport const generateBookMsg = ( { email, name, phone, date, persons }: IForm) => {\n    return `Dear ${name}! We'll wait on you ${+persons > 1 ? `and ${+persons - 1} your friends`: ''} ${date.replaceAll('T', ' at ')}. If something will change, we'll contact you by ${email} or ${phone}.`\n}","import React, { ChangeEventHandler, FormEventHandler, useState } from 'react';\nimport { Input } from \"../../shared/Input/Input\";\nimport { capitalize, generateBookMsg, INPUT_TYPES } from \"../../../utils/stringUtils\";\nimport './BookSection.scss'\nimport { Image } from \"react-bootstrap\";\nimport { Confirm, Notify } from \"notiflix\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport interface IForm {\n    name: string,\n    date: string,\n    email: string,\n    phone: string,\n    persons: string\n}\n\nexport const BookSection = () => {\n    const inputNames = ['name', 'phone', 'email'];\n    const navigate = useNavigate();\n    const [form, setForm] = useState<IForm>({\n        name: '',\n        date: '',\n        email: '',\n        phone: '',\n        persons: ''\n    });\n\n    const handleSubmit: FormEventHandler = (event) => {\n        event.preventDefault();\n        Confirm.show(\n            'Is everything ok?',\n            generateBookMsg(form),\n            'Yes',\n            'No',\n            () => {\n                Notify.info('Great. See you!');\n\n                (event.target as HTMLFormElement).reset();\n                setTimeout(() => {\n                    navigate('/')\n                }, 1000);\n\n            }\n        )\n    }\n\n    const handleChange: ChangeEventHandler = (event) => {\n        const { name, value } = event.target as HTMLInputElement;\n        setForm((prevState) => ({\n            ...prevState,\n            [name]: value\n        }))\n    }\n\n    return (\n        <section className=\"book_section layout_padding\">\n            <div className=\"container\">\n                <div className=\"heading_container\">\n                    <h2>\n                        Book A Table\n                    </h2>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <div className=\"form_container\">\n                            <form onSubmit={ handleSubmit }>\n                                { inputNames.map((name) => (\n                                        <Input\n                                            key={ name }\n                                            type={ INPUT_TYPES.find(type => name === type) || \"text\" }\n                                            name={ name }\n                                            state={ form[name] }\n                                            setState={ handleChange }\n                                            placeholder={ `Your ${ capitalize(name) }` }\n                                            className=\"form-control\"\n                                        />\n                                    )\n                                ) }\n                                <select className=\"form-control nice-select wide\" name={ 'persons' }\n                                        onChange={ handleChange }>\n                                    <option defaultValue={ \"\" } disabled>\n                                        How many persons?\n                                    </option>\n                                    <option value=\"1\">\n                                        1\n                                    </option>\n                                    <option value=\"2\">\n                                        2\n                                    </option>\n                                    <option value=\"3\">\n                                        3\n                                    </option>\n                                    <option value=\"4\">\n                                        4\n                                    </option>\n                                    <option value=\"5\">\n                                        5\n                                    </option>\n                                </select>\n                                { <Input\n                                    type={ 'datetime-local' }\n                                    name={ 'date' }\n                                    state={ form['date'] }\n                                    setState={ handleChange }\n                                    className={ 'form-control' }\n                                /> }\n                                <div className=\"btn_box\">\n                                    <button type={ \"submit\" }>\n                                        Book Now\n                                    </button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <div className=\"map_container \">\n                            <Image\n                                src={ 'https://i.insider.com/602ee9ced3ad27001837f2ac?width=2000&format=jpeg&auto=webp' }\n                                roundedCircle={ true }\n                                fluid={ true }\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n};\n"],"names":["BookPage","Input","type","className","placeholder","name","state","setState","value","onChange","required","INPUT_TYPES","BookSection","navigate","useNavigate","useState","date","email","phone","persons","form","setForm","handleChange","event","target","prevState","onSubmit","preventDefault","Confirm","replaceAll","generateBookMsg","Notify","reset","setTimeout","map","find","string","toLocaleUpperCase","slice","defaultValue","disabled","Image","src","roundedCircle","fluid"],"sourceRoot":""}